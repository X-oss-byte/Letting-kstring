schedules:
- cron: "12 12 12 * *"
  displayName: Monthly Build
  branches:
    include:
    - master
variables:
  minrust: 1.37.0
  codecov_token: $(CODECOV_TOKEN_SECRET)
  windows_vm: vs2017-win2016
  mac_vm: macos-10.14
  linux_vm: ubuntu-16.04

stages:
- stage: check
  displayName: Compilation Check
  jobs:
  - job: cargo_check
    displayName: cargo check
    pool:
      vmImage: ${{ variables.linux_vm }}
    steps:
    - template: install-rust.yml@templates
      parameters:
        rust: stable
    - script: cargo check --all --all-targets
      displayName: Default features
- stage: test
  displayName: Test
  jobs:
  - job: test
    displayName: Test
    strategy:
      matrix:
        windows:
          imageName: ${{ variables.windows_vm }}
          target: 'x86_64-pc-windows-msvc'
          channel: stable
        mac:
          imageName: ${{ variables.mac_vm }}
          target: 'x86_64-apple-darwin'
          channel: stable
        linux:
          imageName: ${{ variables.linux_vm }}
          target: 'x86_64-unknown-linux-gnu'
          channel: stable
        linux_beta:
          imageName: ${{ variables.linux_vm }}
          target: 'x86_64-unknown-linux-gnu'
          channel: beta
        linux_nightly:
          imageName: ${{ variables.linux_vm }}
          target: 'x86_64-unknown-linux-gnu'
          channel: nightly
    continueOnError: ${{ eq(variables.channel, 'nightly') }}
    pool:
      vmImage: $(imageName)
    steps:
    - template: install-rust.yml@templates
      parameters:
        rust: $(channel)
        targets: ["$(TARGET)"]
    - script: cargo test --target $(TARGET) --all
      displayName: cargo test
    - script: cargo doc --target $(TARGET) --no-deps --all
      displayName: cargo doc
  - job: msrv
    displayName: "${{ format('Minimum supported Rust version: {0}', variables.minrust) }}"
    dependsOn: []
    pool:
      vmImage: ${{ variables.linux_vm }}
    steps:
      - template: install-rust.yml@templates
        parameters:
          rust: ${{ variables.minrust }}
      - script: cargo check --all
        displayName: cargo check
- stage: style
  displayName: Style checks
  dependsOn: []
  jobs:
  - job: "Committed"
    pool:
      vmImage: ${{ variables.linux_vm }}
    steps:
    - checkout: self
    - template: v1/azdo-step.yml@gh-install
      parameters:
        git: crate-ci/committed
        target: 'x86_64-unknown-linux-gnu'
        to: $(Build.StagingDirectory)/tools
    - script: |
        echo "This project uses Conventional style, see https://www.conventionalcommits.org"
        $(Build.StagingDirectory)/tools/committed HEAD~..HEAD^2 --no-merge-commit -vv
      displayName: Committed
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  - job: style
    displayName: Style linting
    strategy:
      matrix:
        current:
          channel: stable
        next:
          channel: beta
    continueOnError: ${{ eq(variables.channel, 'beta') }}
    pool:
      vmImage: ${{ variables.linux_vm }}
    steps:
    - template: install-rust.yml@templates
      parameters:
        rust: $(channel)
        components:
          - rustfmt
          - clippy
    - script: cargo fmt --all -- --check
      displayName: rustfmt
    - script: cargo check --all
      displayName: Warnings
      env:
        RUSTFLAGS: "-D warnings"
    - script: cargo clippy --all -- -D warnings
      displayName: clippy
- ${{ if ne('', variables.codecov_token) }}:
  - stage: coverage
    displayName: Code coverage
    dependsOn: test
    jobs:
    - template: coverage.yml@templates
      parameters:
        token: ${{ variables.codecov_token }}

resources:
  repositories:
    - repository: templates
      type: github
      name: crate-ci/azure-pipelines
      endpoint: crate-ci
    - repository: gh-install
      type: github
      name: crate-ci/gh-install
      endpoint: crate-ci
