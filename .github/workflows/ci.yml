name: CI
on:
  pull_request:
    paths:
    - '**'
    - '!/*.md'
    - '!/docs/**'
    - "!/LICENSE-*"
  push:
    branches:
    - master
    paths:
    - '**'
    - '!/*.md'
    - '!/docs/**'
    - "!/LICENSE-*"
  schedule:
  - cron: '12 12 12 * *'
jobs:
  ci:
    name: CI
    needs: [test, msrv, docs, rustfmt, clippy]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: exit 0
  test:
    name: Test
    strategy:
      matrix:
        target:
          - i686-pc-windows-msvc
          - x86_64-pc-windows-msvc
          - i686-pc-windows-gnu
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - x86_64-apple-darwin
        include:
          - target: i686-pc-windows-msvc
            os: windows-latest
            rust: stable
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            rust: stable
          - target: i686-pc-windows-gnu
            os: windows-latest
            rust: stable
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            rust: stable
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust: stable
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            rust: stable
          - target: x86_64-apple-darwin
            os: macos-latest
            rust: stable
    continue-on-error: ${{ matrix.rust != 'stable' }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        profile: minimal
        override: true
    - name: Install linker
      if: matrix.target == 'i686-pc-windows-gnu'
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x86
    - name: Install linker
      if: matrix.target == 'x86_64-pc-windows-gnu'
      uses: egor-tensin/setup-mingw@v2
    - name: Install linker
      if: matrix.target == 'i686-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install gcc-multilib
    - uses: Swatinem/rust-cache@v1
    - name: Build
      run: cargo test --target ${{ matrix.target }} --workspace --no-run --all-features
    - name: Default features
      run: cargo test --target ${{ matrix.target }} --workspace
    - name: All features
      run: cargo test --target ${{ matrix.target }} --workspace --all-features
    - name: No-default features
      run: cargo test --target ${{ matrix.target }} --workspace --no-default-features
  msrv:
    name: "Check MSRV: 1.54.0"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.54.0  # MSRV
        profile: minimal
        override: true
    - uses: Swatinem/rust-cache@v1
    - name: Default features
      run: cargo check --workspace --all-targets
    - name: All features
      run: cargo check --workspace --all-targets --all-features
    - name: No-default features
      run: cargo check --workspace --all-targets --no-default-features
  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - uses: Swatinem/rust-cache@v1
    - name: Check documentation
      env:
        RUSTDOCFLAGS: -D warnings
      run: cargo doc --workspace --all-features --no-deps --document-private-items
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        # Not MSRV because its harder to jump between versions and people are
        # more likely to have stable
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt
    - uses: Swatinem/rust-cache@v1
    - name: Check formatting
      run: cargo fmt --all -- --check
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.54.0  # MSRV
        profile: minimal
        override: true
        components: clippy
    - uses: Swatinem/rust-cache@v1
    - uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --workspace --all-features --all-targets -- -D warnings --allow deprecated
